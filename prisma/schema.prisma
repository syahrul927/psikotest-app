generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now()) @db.Timestamptz(3)
    updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TesterProfile {
    id                   String       @id @default(cuid())
    name                 String
    phone                String
    address              String
    educationId          String
    educationName        String
    educationDescription String?
    Invitation           Invitation[]
}

model KraepelinTemplate {
    id      String @id @default(cuid())
    version String
    x       Int
    y       Int
    value   Int

    @@index([version, x, y])
}

model Invitation {
    id              String         @id @default(cuid())
    name            String?
    secretKey       String
    startAt         DateTime?      @db.Timestamptz(3)
    testerProfileId String?
    testerProfile   TesterProfile? @relation(fields: [testerProfileId], references: [id])
    createdAt       DateTime       @db.Timestamptz(3)
    updatedAt       DateTime       @updatedAt @db.Timestamptz(3)
}

model KraepelinResult {
    id                     String                   @id @default(cuid())
    invitationId           String
    panker                 Float?
    highestJanker          Int?
    lowestJanker           Int?
    janker                 Int?
    tianker                Int?
    hanker                 Float?
    totalAnswered          Int?
    totalIncorrect         Int?
    totalNotAnswered       Int?
    highestFilled          Int?
    lowestFilled           Int?
    deciel                 Float?
    KraepelinResultSummary KraepelinResultSummary[]
    KraepelinResultDetail  KraepelinResultDetail[]
    generated              Boolean?

    @@index([invitationId])
}

// 1 Baris berapa yang terjawab ada di table ini, misalkan baris ke (x) terjawab berapa
model KraepelinResultSummary {
    id                String          @id @default(cuid())
    kraepelinResult   KraepelinResult @relation(fields: [kraepelinResultId], references: [id])
    kraepelinResultId String
    x                 Int
    answered          Int
    correct           Int?
    wrong             Int?
}

model KraepelinResultDetail {
    id                String          @id @default(cuid())
    kraepelinResult   KraepelinResult @relation(fields: [kraepelinResultId], references: [id])
    kraepelinResultId String
    xA                Int
    yA                Int
    xB                Int
    yB                Int
    a                 Int
    b                 Int
    value             Int
    createdAt         DateTime        @default(now()) @db.Timestamptz(3)
}

model IstTesterProfile {
    id                   String              @id @default(cuid())
    name                 String
    phone                String
    address              String
    educationId          String
    placeOfBirth         String
    dateOfBirth          DateTime
    educationName        String
    educationDescription String?
    IstInvitation        IstInvitation[]
    IstSubtestSession    IstSubtestSession[]
}

model IstInvitation {
    id              String              @id @default(cuid())
    name            String?
    secretKey       String
    status          StatusIstInvitation @default(PENDING)
    testerProfileId String?
    testerProfile   IstTesterProfile?   @relation(fields: [testerProfileId], references: [id])
    createdAt       DateTime            @db.Timestamptz(3)
    updatedAt       DateTime            @updatedAt @db.Timestamptz(3)
}

model IstSubtestSession {
    id                 String              @id @default(cuid())
    testerProfileId    String
    IstTesterProfile   IstTesterProfile    @relation(fields: [testerProfileId], references: [id])
    startedAt          DateTime            @default(now())
    submittedAt        DateTime?
    questionOrder      String[] // Array of Question IDs (ordered as shown to user)
    IstSubtestTemplate IstSubtestTemplate? @relation(fields: [subtestTemplateId], references: [id])
    subtestTemplateId  String?
}

model IstUserAnswer {
    id              String              @id @default(cuid())
    testerProfileId String
    question        IstQuestionTemplate @relation(fields: [questionId], references: [id])
    questionId      String
    answer          String
    createdAt       DateTime            @default(now())

    @@index([questionId], name: "user_question_unique")
}

// Template
model IstSubtestTemplate {
    id                String                @id @default(cuid())
    name              String
    description       String                @db.Text // markdown
    timeLimit         Int // in seconds (or minutes â€” your choice)
    questions         IstQuestionTemplate[]
    createdAt         DateTime              @default(now())
    updatedAt         DateTime              @updatedAt
    IstSubtestSession IstSubtestSession[]
}

model IstQuestionTemplate {
    id                 String              @id @default(cuid())
    IstSubtestTemplate IstSubtestTemplate  @relation(fields: [subtestTemplateId], references: [id])
    subtestTemplateId  String
    text               String? // Nullable for image-based questions
    imageUrl           String? // For type 7/8
    options            IstOptionTemplate[] // ABCDE options (text or image URL)
    correctAnswer      String? // Only for template logic, not user input
    order              Int // For sorting questions
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    UserAnswer         IstUserAnswer[]
}

model IstOptionTemplate {
    id          String              @id @default(cuid())
    IstQuestion IstQuestionTemplate @relation(fields: [questionId], references: [id])
    questionId  String
    label       String // A/B/C/D/E
    text        String? // Nullable for image option
    imageUrl    String? // Nullable for text option
}

enum StatusIstInvitation {
    PENDING
    ONPROGRESS
    AWAITING_REVIEW
    DONE
}
