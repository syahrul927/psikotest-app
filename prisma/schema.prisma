// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now()) @db.Timestamptz(3)
    updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model KraepelinTemplate {
    id      String @id @default(cuid())
    version String
    x       Int
    y       Int
    value   Int

    @@index([version, x, y])
}

model TesterProfile {
    id                  String       @id @default(cuid())
    name                String
    phone               String
    address             String
    eductionId          String
    eductionDescription String?
    Invitation          Invitation[]
}

model Invitation {
    id              String         @id @default(cuid())
    name            String?
    secretKey       String
    startAt         DateTime?      @db.Timestamptz(3)
    testerProfileId String?
    testerProfile   TesterProfile? @relation(fields: [testerProfileId], references: [id])
    createdAt       DateTime       @db.Timestamptz(3)
    updatedAt       DateTime       @updatedAt @db.Timestamptz(3)
}

model KraepelinResult {
    id                     String                   @id @default(cuid())
    invitationId           String
    panker                 Float?
    highestJanker          Int?
    lowestJanker           Int?
    janker                 Int?
    tianker                Int?
    hanker                 Float?
    totalAnswered          Int?
    totalIncorrect         Int?
    totalNotAnswered       Int?
    highestFilled          Int?
    lowestFilled           Int?
    deciel                 Float?
    KraepelinResultSummary KraepelinResultSummary[]
    KraepelinResultDetail  KraepelinResultDetail[]

    @@index([invitationId])
}

// 1 Baris berapa yang terjawab ada di table ini, misalkan baris ke (x) terjawab berapa
model KraepelinResultSummary {
    id                String          @id @default(cuid())
    kraepelinResult   KraepelinResult @relation(fields: [kraepelinResultId], references: [id])
    kraepelinResultId String
    x                 Int
    answered          Int
}

model KraepelinResultDetail {
    id                String          @id @default(cuid())
    kraepelinResult   KraepelinResult @relation(fields: [kraepelinResultId], references: [id])
    kraepelinResultId String
    xA                Int
    yA                Int
    xB                Int
    yB                Int
    a                 Int
    b                 Int
    value             Int
    createdAt         DateTime        @default(now()) @db.Timestamptz(3)
}
